/*
 * temperatureService.cpp
 *
 *  Created on: 17 de abr de 2018
 *      Author: guarita
 */

#include "temperatureService.h"

float temp[MAX_ONE_WIRE_DEVICES] = { -100.0 };

// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);

// function to print a device address
void printAddress(DeviceAddress deviceAddress) {
	for (uint8_t i = 0; i < 8; i++) {
		if (deviceAddress[i] < 16)
			Serial.print("0");
		Serial.print(deviceAddress[i], HEX);
	}
}

void temp_loop(void *params) {

	/* DS18B20 SETUP */
	//Temp Setup
	Serial.println("Dallas Temperature IC Control Library Demo");

	// Start up the library
	sensors.begin();

	// Grab a count of devices on the wire
	numberOfDevices = sensors.getDeviceCount();

	delay(1000);

	// locate devices on the bus
	Serial.print("Locating devices...");

	Serial.print("Found ");
	Serial.print(numberOfDevices, DEC);
	Serial.println(" devices.");

	// report parasite power requirements
	Serial.print("Parasite power is: ");
	if (sensors.isParasitePowerMode())
		Serial.println("ON");
	else
		Serial.println("OFF");

	// Loop through each device, print out address
	for (int i = 0; i < numberOfDevices; i++) {
		// Search the wire for address
		if (sensors.getAddress(tempDeviceAddress, i)) {
			Serial.print("Found device ");
			Serial.print(i, DEC);
			Serial.print(" with address: ");
			printAddress(tempDeviceAddress);
			Serial.println();

			Serial.print("Setting resolution to ");
			Serial.println(TEMPERATURE_PRECISION, DEC);

			// set the resolution to TEMPERATURE_PRECISION bit (Each Dallas/Maxim device is capable of several different resolutions)
			sensors.setResolution(tempDeviceAddress, TEMPERATURE_PRECISION);

			Serial.print("Resolution actually set to: ");
			Serial.print(sensors.getResolution(tempDeviceAddress), DEC);
			Serial.println();
		} else {
			Serial.print("Found ghost device at ");
			Serial.print(i, DEC);
			Serial.print(
					" but could not detect address. Check power and cabling");
		}
	}

	for (;;) {

		/* TEMPERATURE READING LOOP */
		// call sensors.requestTemperatures() to issue a global temperature request to all devices on the bus
		Serial.print("Requesting temperatures...");
		sensors.requestTemperatures(); // Send the command to get temperatures

		delay(500);

		Serial.println("DONE");
		// Loop through each device, print out temperature data
		for (int i = 0; i < numberOfDevices; i++) {
			if (!temp_started)
				while (!sensors.getAddress(tempDeviceAddress, i))
					;

			// Search the wire for address
			if (sensors.getAddress(tempDeviceAddress, i)) {
				// Output the device ID
				Serial.print("Temperature for device: ");
				Serial.println(i, DEC);

				Serial.printf("temp[%d]", i);

				// It responds almost immediately. Let's print out the data
				printTemperature(tempDeviceAddress); // Use a simple function to print out the data
				temp[i] = sensors.getTempC(tempDeviceAddress);
			}
			//else ghost device! Check your power requirements and cabling
		}

		if (!temp_started) {
			delay(1000);
			for (int i = 0; i < numberOfDevices; i++) {
				if (sensors.getAddress(tempDeviceAddress, i)) {
					memcpy(temp_addr[i], tempDeviceAddress, 8);

					Serial.printf("Temp Address[%02d]: ", i);
					for (int j = 0; j < 8; j++) {
						Serial.printf("%02X", temp_addr[i][j]);
					}
					Serial.print("\r\n");
				}

				delay(500);
			}
		}

		//temperature reading tasks may use temperature
		temp_started = true;

		delay(500);
	}

}

// function to print the temperature for a device
void printTemperature(DeviceAddress deviceAddress) {
	float tempC = sensors.getTempC(deviceAddress);
	Serial.print("Temp C: ");
	Serial.println(tempC);
	Serial.print("Temp F: ");
	Serial.println(DallasTemperature::toFahrenheit(tempC)); // Converts tempC to Fahrenheit
}




